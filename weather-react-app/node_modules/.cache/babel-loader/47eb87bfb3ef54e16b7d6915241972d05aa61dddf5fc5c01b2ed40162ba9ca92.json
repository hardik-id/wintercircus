{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jangezels\\\\OneDrive - Microsoft\\\\temp\\\\Hack_12_06_2025\\\\Excercises\\\\weather-react-app\\\\src\\\\components\\\\WeatherChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMsal } from '@azure/msal-react';\nimport { apiConfig } from '../authConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherChat = ({\n  user\n}) => {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [questionCount, setQuestionCount] = useState(0);\n  const messagesEndRef = useRef(null);\n  const exampleQuestions = [\"What's the weather forecast for Seattle?\", \"Get weather alerts for Washington\", \"Show me the forecast for New York City\", \"Get weather alerts for California\", \"What's the weather like in Miami?\"];\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleLogout = () => {\n    instance.logoutPopup().catch(e => {\n      console.error('Logout failed:', e);\n    });\n  };\n  const callWeatherAgent = async question => {\n    try {\n      console.log('Calling MCP server at:', apiConfig.mcpServer.url);\n      console.log('With API key:', apiConfig.mcpServer.apiKey ? 'Present' : 'Missing');\n\n      // For now, let's test direct connection to your MCP server\n      // Since your MCP server is exposed via SSE, we'll try a direct approach\n\n      // Parse the question to extract function calls\n      const lowerQuestion = question.toLowerCase();\n      let mcpResponse;\n      if (lowerQuestion.includes('forecast') || lowerQuestion.includes('weather for') || lowerQuestion.includes('weather like')) {\n        // Extract location from natural language\n        const locationMatch = question.match(/(?:for|in|at)\\s+([a-zA-Z\\s,]+)/i);\n        if (locationMatch) {\n          const location = locationMatch[1].trim();\n          mcpResponse = await callMCPFunction('get_forecast', {\n            location\n          });\n        } else {\n          return \"To get a weather forecast, please specify a location like: 'What's the weather forecast for Seattle?' or 'Show me the forecast for New York City'\";\n        }\n      } else if (lowerQuestion.includes('alert')) {\n        // Extract location/state from natural language\n        const locationMatch = question.match(/(?:for|in|at)\\s+([a-zA-Z\\s,]+)/i);\n        if (locationMatch) {\n          const location = locationMatch[1].trim();\n          mcpResponse = await callMCPFunction('get_alerts', {\n            location\n          });\n        } else {\n          return \"To get weather alerts, please specify a location like: 'Get weather alerts for Washington' or 'Show alerts for California'\";\n        }\n      } else {\n        return `I can help you with weather forecasts and alerts! Try asking:\n• \"What's the weather forecast for Seattle?\"\n• \"Get weather alerts for Washington\"\n• \"Show me the forecast for New York City\"`;\n      }\n\n      // Format the MCP response nicely\n      if (mcpResponse && mcpResponse.content) {\n        return mcpResponse.content;\n      } else if (mcpResponse) {\n        return JSON.stringify(mcpResponse, null, 2);\n      } else {\n        return \"No data received from weather service.\";\n      }\n    } catch (error) {\n      console.error('Weather API Error:', error);\n      throw new Error(`Failed to get weather information: ${error.message}`);\n    }\n  };\n  const callMCPFunction = async (functionName, args) => {\n    try {\n      console.log(`Calling MCP function: ${functionName}`, args);\n\n      // Your MCP server uses SSE protocol which is complex for browser calls\n      // Let's try a direct test first to see if CORS is enabled\n      const testUrl = apiConfig.mcpServer.url.replace('/sse', '/test');\n      const response = await fetch(apiConfig.mcpServer.url, {\n        method: 'GET',\n        headers: {\n          'x-api-key': apiConfig.mcpServer.apiKey,\n          'Accept': 'text/event-stream',\n          'Cache-Control': 'no-cache'\n        },\n        mode: 'cors' // Enable CORS\n      });\n      if (!response.ok) {\n        throw new Error(`MCP server connection failed: ${response.status} ${response.statusText}`);\n      }\n\n      // For now, return a message about the connection\n      return {\n        content: `Successfully connected to MCP server at ${apiConfig.mcpServer.url}. \n        Function requested: ${functionName} with args: ${JSON.stringify(args)}\n        \n        Note: Full MCP protocol implementation requires server-side proxy due to SSE complexity.\n        Current status: Connection test ${response.ok ? 'successful' : 'failed'}`\n      };\n    } catch (error) {\n      console.error('MCP Server Error:', error);\n\n      // Check if it's a CORS error\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        return {\n          content: `⚠️ CORS Error: Cannot directly connect to MCP server from browser.\n          \nThe MCP server at ${apiConfig.mcpServer.url} needs CORS headers to allow browser connections.\n\nSuggested solutions:\n1. Add CORS middleware to your MCP server\n2. Create a backend proxy service\n3. Use the weather data through Azure OpenAI (recommended approach)\n\nError details: ${error.message}`\n        };\n      }\n      throw error;\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    const userMessage = inputValue.trim();\n    setInputValue('');\n    setError('');\n    setIsLoading(true);\n\n    // Add user message\n    const newUserMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newUserMessage]);\n    setQuestionCount(prev => prev + 1);\n    try {\n      // Call Azure OpenAI with MCP server integration\n      const response = await callWeatherAgent(userMessage);\n\n      // Add assistant response\n      const assistantMessage = {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: response,\n        timestamp: new Date(),\n        metadata: {\n          mcpServer: 'WeatherTools MCP Server',\n          serverUrl: apiConfig.mcpServer.url,\n          model: `${apiConfig.agent.name} (${apiConfig.azureOpenAI.deploymentName})`,\n          inputWords: userMessage.split(' ').length,\n          responseWords: response.split(' ').length\n        }\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      setError('Failed to get weather information. Please try again.');\n      console.error('Weather API error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleExampleClick = question => {\n    setInputValue(question);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF24\\uFE0F Weather Agent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Welcome, \", (user === null || user === void 0 ? void 0 : user.name) || 'User', \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-button\",\n          onClick: handleLogout,\n          children: \"Sign Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example-questions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83C\\uDF1F Example Questions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: exampleQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleExampleClick(question),\n              children: question\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uD83D\\uDCA1 Tip:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 18\n            }, this), \" Click on any example above or type your own weather question!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u274C \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-label\",\n            children: message.type === 'user' ? '🤔 You asked:' : '🤖 Weather Agent:'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), message.metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Response Details:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"MCP Server:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 22\n              }, this), \" \", message.metadata.mcpServer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Model:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 22\n              }, this), \" \", message.metadata.model]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Input:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 22\n              }, this), \" \", message.metadata.inputWords, \" words\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Response:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 22\n              }, this), \" \", message.metadata.responseWords, \" words\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Question #\", questionCount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message assistant\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-label\",\n            children: \"\\uD83E\\uDD16 Weather Agent:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading\",\n            children: \"Getting weather information...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"message-input\",\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"Ask me about the weather... (e.g., What's the forecast for London?)\",\n            rows: 1,\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            onClick: handleSendMessage,\n            disabled: !inputValue.trim() || isLoading,\n            children: [isLoading ? '⏳' : '🚀', \" Send\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '10px',\n            fontSize: '0.9rem',\n            color: '#666'\n          },\n          children: [\"\\uD83D\\uDCA1 Connected to: \", apiConfig.mcpServer.url, \" | Questions asked: \", questionCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherChat, \"D6h1/DbdTApbWiT8PfSAmhkrcmg=\", false, function () {\n  return [useMsal];\n});\n_c = WeatherChat;\nexport default WeatherChat;\nvar _c;\n$RefreshReg$(_c, \"WeatherChat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMsal","apiConfig","jsxDEV","_jsxDEV","WeatherChat","user","_s","instance","messages","setMessages","inputValue","setInputValue","isLoading","setIsLoading","error","setError","questionCount","setQuestionCount","messagesEndRef","exampleQuestions","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleLogout","logoutPopup","catch","e","console","callWeatherAgent","question","log","mcpServer","url","apiKey","lowerQuestion","toLowerCase","mcpResponse","includes","locationMatch","match","location","trim","callMCPFunction","content","JSON","stringify","Error","message","functionName","args","testUrl","replace","response","fetch","method","headers","mode","ok","status","statusText","name","handleSendMessage","userMessage","newUserMessage","id","Date","now","type","timestamp","prev","assistantMessage","metadata","serverUrl","model","agent","azureOpenAI","deploymentName","inputWords","split","length","responseWords","err","handleKeyPress","key","shiftKey","preventDefault","handleExampleClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","value","onChange","target","onKeyPress","placeholder","rows","disabled","style","marginTop","fontSize","color","_c","$RefreshReg$"],"sources":["C:/Users/jangezels/OneDrive - Microsoft/temp/Hack_12_06_2025/Excercises/weather-react-app/src/components/WeatherChat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { apiConfig } from '../authConfig';\r\n\r\nconst WeatherChat = ({ user }) => {\r\n  const { instance } = useMsal();\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [questionCount, setQuestionCount] = useState(0);\r\n  const messagesEndRef = useRef(null);  const exampleQuestions = [\r\n    \"What's the weather forecast for Seattle?\",\r\n    \"Get weather alerts for Washington\",\r\n    \"Show me the forecast for New York City\", \r\n    \"Get weather alerts for California\",\r\n    \"What's the weather like in Miami?\"\r\n  ];\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleLogout = () => {\r\n    instance.logoutPopup().catch(e => {\r\n      console.error('Logout failed:', e);\r\n    });\r\n  };  const callWeatherAgent = async (question) => {\r\n    try {\r\n      console.log('Calling MCP server at:', apiConfig.mcpServer.url);\r\n      console.log('With API key:', apiConfig.mcpServer.apiKey ? 'Present' : 'Missing');\r\n      \r\n      // For now, let's test direct connection to your MCP server\r\n      // Since your MCP server is exposed via SSE, we'll try a direct approach\r\n      \r\n      // Parse the question to extract function calls\r\n      const lowerQuestion = question.toLowerCase();\r\n      let mcpResponse;\r\n        if (lowerQuestion.includes('forecast') || lowerQuestion.includes('weather for') || lowerQuestion.includes('weather like')) {\r\n        // Extract location from natural language\r\n        const locationMatch = question.match(/(?:for|in|at)\\s+([a-zA-Z\\s,]+)/i);\r\n        if (locationMatch) {\r\n          const location = locationMatch[1].trim();\r\n          mcpResponse = await callMCPFunction('get_forecast', { location });\r\n        } else {\r\n          return \"To get a weather forecast, please specify a location like: 'What's the weather forecast for Seattle?' or 'Show me the forecast for New York City'\";\r\n        }\r\n      } else if (lowerQuestion.includes('alert')) {\r\n        // Extract location/state from natural language\r\n        const locationMatch = question.match(/(?:for|in|at)\\s+([a-zA-Z\\s,]+)/i);\r\n        if (locationMatch) {\r\n          const location = locationMatch[1].trim();\r\n          mcpResponse = await callMCPFunction('get_alerts', { location });\r\n        } else {\r\n          return \"To get weather alerts, please specify a location like: 'Get weather alerts for Washington' or 'Show alerts for California'\";\r\n        }\r\n      } else {\r\n        return `I can help you with weather forecasts and alerts! Try asking:\r\n• \"What's the weather forecast for Seattle?\"\r\n• \"Get weather alerts for Washington\"\r\n• \"Show me the forecast for New York City\"`;\r\n      }\r\n      \r\n      // Format the MCP response nicely\r\n      if (mcpResponse && mcpResponse.content) {\r\n        return mcpResponse.content;\r\n      } else if (mcpResponse) {\r\n        return JSON.stringify(mcpResponse, null, 2);\r\n      } else {\r\n        return \"No data received from weather service.\";\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Weather API Error:', error);\r\n      throw new Error(`Failed to get weather information: ${error.message}`);\r\n    }\r\n  };\r\n  const callMCPFunction = async (functionName, args) => {\r\n    try {\r\n      console.log(`Calling MCP function: ${functionName}`, args);\r\n      \r\n      // Your MCP server uses SSE protocol which is complex for browser calls\r\n      // Let's try a direct test first to see if CORS is enabled\r\n      const testUrl = apiConfig.mcpServer.url.replace('/sse', '/test');\r\n      \r\n      const response = await fetch(apiConfig.mcpServer.url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'x-api-key': apiConfig.mcpServer.apiKey,\r\n          'Accept': 'text/event-stream',\r\n          'Cache-Control': 'no-cache',\r\n        },\r\n        mode: 'cors' // Enable CORS\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`MCP server connection failed: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      // For now, return a message about the connection\r\n      return {\r\n        content: `Successfully connected to MCP server at ${apiConfig.mcpServer.url}. \r\n        Function requested: ${functionName} with args: ${JSON.stringify(args)}\r\n        \r\n        Note: Full MCP protocol implementation requires server-side proxy due to SSE complexity.\r\n        Current status: Connection test ${response.ok ? 'successful' : 'failed'}`\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('MCP Server Error:', error);\r\n      \r\n      // Check if it's a CORS error\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        return {\r\n          content: `⚠️ CORS Error: Cannot directly connect to MCP server from browser.\r\n          \r\nThe MCP server at ${apiConfig.mcpServer.url} needs CORS headers to allow browser connections.\r\n\r\nSuggested solutions:\r\n1. Add CORS middleware to your MCP server\r\n2. Create a backend proxy service\r\n3. Use the weather data through Azure OpenAI (recommended approach)\r\n\r\nError details: ${error.message}`\r\n        };\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim() || isLoading) return;\r\n\r\n    const userMessage = inputValue.trim();\r\n    setInputValue('');\r\n    setError('');\r\n    setIsLoading(true);\r\n\r\n    // Add user message\r\n    const newUserMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: userMessage,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newUserMessage]);\r\n    setQuestionCount(prev => prev + 1);    try {\r\n      // Call Azure OpenAI with MCP server integration\r\n      const response = await callWeatherAgent(userMessage);\r\n      \r\n      // Add assistant response\r\n      const assistantMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'assistant',\r\n        content: response,\r\n        timestamp: new Date(),\r\n        metadata: {\r\n          mcpServer: 'WeatherTools MCP Server',\r\n          serverUrl: apiConfig.mcpServer.url,\r\n          model: `${apiConfig.agent.name} (${apiConfig.azureOpenAI.deploymentName})`,\r\n          inputWords: userMessage.split(' ').length,\r\n          responseWords: response.split(' ').length\r\n        }\r\n      };\r\n      \r\n      setMessages(prev => [...prev, assistantMessage]);\r\n      \r\n    } catch (err) {\r\n      setError('Failed to get weather information. Please try again.');\r\n      console.error('Weather API error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleExampleClick = (question) => {\r\n    setInputValue(question);\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-app\">\r\n      <div className=\"app-header\">\r\n        <h1>🌤️ Weather Agent</h1>\r\n        <div className=\"user-info\">\r\n          <span>Welcome, {user?.name || 'User'}!</span>\r\n          <button className=\"logout-button\" onClick={handleLogout}>\r\n            Sign Out\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"chat-container\">\r\n        <div className=\"messages-area\">\r\n          {messages.length === 0 && (\r\n            <div className=\"example-questions\">\r\n              <h3>🌟 Example Questions:</h3>\r\n              <ul>\r\n                {exampleQuestions.map((question, index) => (\r\n                  <li key={index} onClick={() => handleExampleClick(question)}>\r\n                    {question}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <p><strong>💡 Tip:</strong> Click on any example above or type your own weather question!</p>\r\n            </div>\r\n          )}\r\n          \r\n          {error && (\r\n            <div className=\"error-message\">\r\n              ❌ {error}\r\n            </div>\r\n          )}\r\n          \r\n          {messages.map((message) => (\r\n            <div key={message.id} className={`message ${message.type}`}>\r\n              <div className=\"message-label\">\r\n                {message.type === 'user' ? '🤔 You asked:' : '🤖 Weather Agent:'}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                {message.content}\r\n              </div>\r\n              {message.metadata && (\r\n                <div className=\"info-panel\">\r\n                  <h4>📊 Response Details:</h4>\r\n                  <p><strong>MCP Server:</strong> {message.metadata.mcpServer}</p>\r\n                  <p><strong>Model:</strong> {message.metadata.model}</p>\r\n                  <p><strong>Input:</strong> {message.metadata.inputWords} words</p>\r\n                  <p><strong>Response:</strong> {message.metadata.responseWords} words</p>\r\n                  <p><strong>Question #{questionCount}</strong></p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n          \r\n          {isLoading && (\r\n            <div className=\"message assistant\">\r\n              <div className=\"message-label\">🤖 Weather Agent:</div>\r\n              <div className=\"loading\">Getting weather information...</div>\r\n            </div>\r\n          )}\r\n          \r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        \r\n        <div className=\"input-area\">\r\n          <div className=\"input-container\">\r\n            <textarea\r\n              className=\"message-input\"\r\n              value={inputValue}\r\n              onChange={(e) => setInputValue(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Ask me about the weather... (e.g., What's the forecast for London?)\"\r\n              rows={1}\r\n              disabled={isLoading}\r\n            />\r\n            <button\r\n              className=\"send-button\"\r\n              onClick={handleSendMessage}\r\n              disabled={!inputValue.trim() || isLoading}\r\n            >\r\n              {isLoading ? '⏳' : '🚀'} Send\r\n            </button>\r\n          </div>\r\n          <div style={{ marginTop: '10px', fontSize: '0.9rem', color: '#666' }}>\r\n            💡 Connected to: {apiConfig.mcpServer.url} | Questions asked: {questionCount}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}