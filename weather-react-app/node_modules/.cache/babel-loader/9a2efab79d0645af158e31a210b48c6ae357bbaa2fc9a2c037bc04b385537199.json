{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jangezels\\\\OneDrive - Microsoft\\\\temp\\\\Hack_12_06_2025\\\\Excercises\\\\weather-react-app\\\\src\\\\components\\\\WeatherChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useMsal } from '@azure/msal-react';\nimport { apiConfig } from '../authConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherChat = ({\n  user\n}) => {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [questionCount, setQuestionCount] = useState(0);\n  const messagesEndRef = useRef(null);\n  const exampleQuestions = [\"What's the weather forecast for Seattle? (latitude: 47.6062, longitude: -122.3321)\", \"Are there any weather alerts for Washington state?\", \"Can you get the forecast for New York City? (latitude: 40.7128, longitude: -74.0060)\", \"Get weather alerts for California (state code: CA)\", \"What's the forecast for Miami? (latitude: 25.7617, longitude: -80.1918)\"];\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleLogout = () => {\n    instance.logoutPopup().catch(e => {\n      console.error('Logout failed:', e);\n    });\n  };\n  const callWeatherAgent = async question => {\n    try {\n      // Call Azure OpenAI with MCP server integration\n      const response = await fetch(apiConfig.azureOpenAI.endpoint + '/openai/deployments/' + apiConfig.azureOpenAI.deploymentName + '/chat/completions?api-version=' + apiConfig.azureOpenAI.apiVersion, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'api-key': apiConfig.azureOpenAI.apiKey\n        },\n        body: JSON.stringify({\n          messages: [{\n            role: \"system\",\n            content: `You are a helpful weather assistant that can provide weather forecasts and alerts for any location. \n              \nYou have access to weather tools through an MCP server at ${apiConfig.mcpServer.url}.\nAvailable functions:\n- get_forecast(latitude, longitude): Get weather forecast for coordinates\n- get_alerts(state_code): Get weather alerts for a US state (use 2-letter state codes like 'WA', 'CA', 'NY')\n\nWhen users ask for weather information:\n1. If they mention a city/location, ask for or look up the latitude/longitude coordinates\n2. If they ask about alerts, ask for or determine the US state code\n3. Use the appropriate weather function to get real data\n4. Present the information in a clear, helpful format with emojis\n\nRemember: You need coordinates (lat/long) for forecasts and state codes for alerts.`\n          }, {\n            role: \"user\",\n            content: question\n          }],\n          max_tokens: 1000,\n          temperature: 0.7,\n          tools: [{\n            type: \"function\",\n            function: {\n              name: \"get_forecast\",\n              description: \"Get weather forecast for a specific location using coordinates\",\n              parameters: {\n                type: \"object\",\n                properties: {\n                  latitude: {\n                    type: \"number\",\n                    description: \"Latitude coordinate\"\n                  },\n                  longitude: {\n                    type: \"number\",\n                    description: \"Longitude coordinate\"\n                  }\n                },\n                required: [\"latitude\", \"longitude\"]\n              }\n            }\n          }, {\n            type: \"function\",\n            function: {\n              name: \"get_alerts\",\n              description: \"Get weather alerts for a US state\",\n              parameters: {\n                type: \"object\",\n                properties: {\n                  state_code: {\n                    type: \"string\",\n                    description: \"2-letter US state code (e.g., 'CA', 'NY', 'WA')\"\n                  }\n                },\n                required: [\"state_code\"]\n              }\n            }\n          }],\n          tool_choice: \"auto\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Azure OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Check if Azure OpenAI wants to call a function\n      if (data.choices[0].message.tool_calls) {\n        const toolCall = data.choices[0].message.tool_calls[0];\n        const functionName = toolCall.function.name;\n        const functionArgs = JSON.parse(toolCall.function.arguments);\n\n        // Call the MCP server function\n        let mcpResponse;\n        if (functionName === 'get_forecast') {\n          mcpResponse = await callMCPFunction('get_forecast', functionArgs);\n        } else if (functionName === 'get_alerts') {\n          mcpResponse = await callMCPFunction('get_alerts', functionArgs);\n        }\n\n        // Send the function result back to Azure OpenAI\n        const finalResponse = await fetch(apiConfig.azureOpenAI.endpoint + '/openai/deployments/' + apiConfig.azureOpenAI.deploymentName + '/chat/completions?api-version=' + apiConfig.azureOpenAI.apiVersion, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': apiConfig.azureOpenAI.apiKey\n          },\n          body: JSON.stringify({\n            messages: [{\n              role: \"system\",\n              content: `You are a helpful weather assistant. Present weather data in a clear, helpful format with emojis.`\n            }, {\n              role: \"user\",\n              content: question\n            }, {\n              role: \"assistant\",\n              content: null,\n              tool_calls: data.choices[0].message.tool_calls\n            }, {\n              role: \"tool\",\n              tool_call_id: toolCall.id,\n              content: JSON.stringify(mcpResponse)\n            }],\n            max_tokens: 1000,\n            temperature: 0.7\n          })\n        });\n        const finalData = await finalResponse.json();\n        return finalData.choices[0].message.content;\n      }\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Weather API Error:', error);\n      throw new Error(`Failed to get weather information: ${error.message}`);\n    }\n  };\n  const callMCPFunction = async (functionName, args) => {\n    try {\n      const response = await fetch(apiConfig.mcpServer.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': apiConfig.mcpServer.apiKey\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          method: \"tools/call\",\n          params: {\n            name: functionName,\n            arguments: args\n          },\n          id: Date.now()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`MCP server error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(`MCP function error: ${data.error.message}`);\n      }\n      return data.result;\n    } catch (error) {\n      console.error('MCP Server Error:', error);\n      throw error;\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    const userMessage = inputValue.trim();\n    setInputValue('');\n    setError('');\n    setIsLoading(true);\n\n    // Add user message\n    const newUserMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newUserMessage]);\n    setQuestionCount(prev => prev + 1);\n    try {\n      // Simulate API call to your weather agent\n      const response = await simulateWeatherResponse(userMessage);\n\n      // Add assistant response\n      const assistantMessage = {\n        id: Date.now() + 1,\n        type: 'assistant',\n        content: response,\n        timestamp: new Date(),\n        metadata: {\n          mcpServer: 'WeatherTools MCP Server',\n          serverUrl: apiConfig.mcpServer.url,\n          model: `${apiConfig.agent.name} (${apiConfig.azureOpenAI.deploymentName})`,\n          inputWords: userMessage.split(' ').length,\n          responseWords: response.split(' ').length\n        }\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      setError('Failed to get weather information. Please try again.');\n      console.error('Weather API error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleExampleClick = question => {\n    setInputValue(question);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF24\\uFE0F Weather Agent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Welcome, \", (user === null || user === void 0 ? void 0 : user.name) || 'User', \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-button\",\n          onClick: handleLogout,\n          children: \"Sign Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-area\",\n        children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example-questions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83C\\uDF1F Example Questions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: exampleQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleExampleClick(question),\n              children: question\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uD83D\\uDCA1 Tip:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 18\n            }, this), \" Click on any example above or type your own weather question!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u274C \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-label\",\n            children: message.type === 'user' ? '🤔 You asked:' : '🤖 Weather Agent:'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), message.metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Response Details:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"MCP Server:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 22\n              }, this), \" \", message.metadata.mcpServer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Model:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 22\n              }, this), \" \", message.metadata.model]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Input:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 22\n              }, this), \" \", message.metadata.inputWords, \" words\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Response:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 22\n              }, this), \" \", message.metadata.responseWords, \" words\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Question #\", questionCount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message assistant\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-label\",\n            children: \"\\uD83E\\uDD16 Weather Agent:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading\",\n            children: \"Getting weather information...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"message-input\",\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"Ask me about the weather... (e.g., What's the forecast for London?)\",\n            rows: 1,\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            onClick: handleSendMessage,\n            disabled: !inputValue.trim() || isLoading,\n            children: [isLoading ? '⏳' : '🚀', \" Send\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '10px',\n            fontSize: '0.9rem',\n            color: '#666'\n          },\n          children: [\"\\uD83D\\uDCA1 Connected to: \", apiConfig.mcpServer.url, \" | Questions asked: \", questionCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherChat, \"D6h1/DbdTApbWiT8PfSAmhkrcmg=\", false, function () {\n  return [useMsal];\n});\n_c = WeatherChat;\nexport default WeatherChat;\nvar _c;\n$RefreshReg$(_c, \"WeatherChat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMsal","apiConfig","jsxDEV","_jsxDEV","WeatherChat","user","_s","instance","messages","setMessages","inputValue","setInputValue","isLoading","setIsLoading","error","setError","questionCount","setQuestionCount","messagesEndRef","exampleQuestions","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleLogout","logoutPopup","catch","e","console","callWeatherAgent","question","response","fetch","azureOpenAI","endpoint","deploymentName","apiVersion","method","headers","apiKey","body","JSON","stringify","role","content","mcpServer","url","max_tokens","temperature","tools","type","function","name","description","parameters","properties","latitude","longitude","required","state_code","tool_choice","ok","Error","status","statusText","data","json","choices","message","tool_calls","toolCall","functionName","functionArgs","parse","arguments","mcpResponse","callMCPFunction","finalResponse","tool_call_id","id","finalData","args","jsonrpc","params","Date","now","result","handleSendMessage","trim","userMessage","newUserMessage","timestamp","prev","simulateWeatherResponse","assistantMessage","metadata","serverUrl","model","agent","inputWords","split","length","responseWords","err","handleKeyPress","key","shiftKey","preventDefault","handleExampleClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","value","onChange","target","onKeyPress","placeholder","rows","disabled","style","marginTop","fontSize","color","_c","$RefreshReg$"],"sources":["C:/Users/jangezels/OneDrive - Microsoft/temp/Hack_12_06_2025/Excercises/weather-react-app/src/components/WeatherChat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { apiConfig } from '../authConfig';\r\n\r\nconst WeatherChat = ({ user }) => {\r\n  const { instance } = useMsal();\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [questionCount, setQuestionCount] = useState(0);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const exampleQuestions = [\r\n    \"What's the weather forecast for Seattle? (latitude: 47.6062, longitude: -122.3321)\",\r\n    \"Are there any weather alerts for Washington state?\",\r\n    \"Can you get the forecast for New York City? (latitude: 40.7128, longitude: -74.0060)\",\r\n    \"Get weather alerts for California (state code: CA)\",\r\n    \"What's the forecast for Miami? (latitude: 25.7617, longitude: -80.1918)\"\r\n  ];\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleLogout = () => {\r\n    instance.logoutPopup().catch(e => {\r\n      console.error('Logout failed:', e);\r\n    });\r\n  };\r\n  const callWeatherAgent = async (question) => {\r\n    try {\r\n      // Call Azure OpenAI with MCP server integration\r\n      const response = await fetch(apiConfig.azureOpenAI.endpoint + '/openai/deployments/' + apiConfig.azureOpenAI.deploymentName + '/chat/completions?api-version=' + apiConfig.azureOpenAI.apiVersion, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'api-key': apiConfig.azureOpenAI.apiKey,\r\n        },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content: `You are a helpful weather assistant that can provide weather forecasts and alerts for any location. \r\n              \r\nYou have access to weather tools through an MCP server at ${apiConfig.mcpServer.url}.\r\nAvailable functions:\r\n- get_forecast(latitude, longitude): Get weather forecast for coordinates\r\n- get_alerts(state_code): Get weather alerts for a US state (use 2-letter state codes like 'WA', 'CA', 'NY')\r\n\r\nWhen users ask for weather information:\r\n1. If they mention a city/location, ask for or look up the latitude/longitude coordinates\r\n2. If they ask about alerts, ask for or determine the US state code\r\n3. Use the appropriate weather function to get real data\r\n4. Present the information in a clear, helpful format with emojis\r\n\r\nRemember: You need coordinates (lat/long) for forecasts and state codes for alerts.`\r\n            },\r\n            {\r\n              role: \"user\", \r\n              content: question\r\n            }\r\n          ],\r\n          max_tokens: 1000,\r\n          temperature: 0.7,\r\n          tools: [\r\n            {\r\n              type: \"function\",\r\n              function: {\r\n                name: \"get_forecast\",\r\n                description: \"Get weather forecast for a specific location using coordinates\",\r\n                parameters: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    latitude: {\r\n                      type: \"number\",\r\n                      description: \"Latitude coordinate\"\r\n                    },\r\n                    longitude: {\r\n                      type: \"number\", \r\n                      description: \"Longitude coordinate\"\r\n                    }\r\n                  },\r\n                  required: [\"latitude\", \"longitude\"]\r\n                }\r\n              }\r\n            },\r\n            {\r\n              type: \"function\",\r\n              function: {\r\n                name: \"get_alerts\",\r\n                description: \"Get weather alerts for a US state\",\r\n                parameters: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    state_code: {\r\n                      type: \"string\",\r\n                      description: \"2-letter US state code (e.g., 'CA', 'NY', 'WA')\"\r\n                    }\r\n                  },\r\n                  required: [\"state_code\"]\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          tool_choice: \"auto\"\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Azure OpenAI API error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Check if Azure OpenAI wants to call a function\r\n      if (data.choices[0].message.tool_calls) {\r\n        const toolCall = data.choices[0].message.tool_calls[0];\r\n        const functionName = toolCall.function.name;\r\n        const functionArgs = JSON.parse(toolCall.function.arguments);\r\n        \r\n        // Call the MCP server function\r\n        let mcpResponse;\r\n        if (functionName === 'get_forecast') {\r\n          mcpResponse = await callMCPFunction('get_forecast', functionArgs);\r\n        } else if (functionName === 'get_alerts') {\r\n          mcpResponse = await callMCPFunction('get_alerts', functionArgs);\r\n        }\r\n        \r\n        // Send the function result back to Azure OpenAI\r\n        const finalResponse = await fetch(apiConfig.azureOpenAI.endpoint + '/openai/deployments/' + apiConfig.azureOpenAI.deploymentName + '/chat/completions?api-version=' + apiConfig.azureOpenAI.apiVersion, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'api-key': apiConfig.azureOpenAI.apiKey,\r\n          },\r\n          body: JSON.stringify({\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content: `You are a helpful weather assistant. Present weather data in a clear, helpful format with emojis.`\r\n              },\r\n              {\r\n                role: \"user\", \r\n                content: question\r\n              },\r\n              {\r\n                role: \"assistant\",\r\n                content: null,\r\n                tool_calls: data.choices[0].message.tool_calls\r\n              },\r\n              {\r\n                role: \"tool\",\r\n                tool_call_id: toolCall.id,\r\n                content: JSON.stringify(mcpResponse)\r\n              }\r\n            ],\r\n            max_tokens: 1000,\r\n            temperature: 0.7\r\n          })\r\n        });\r\n        \r\n        const finalData = await finalResponse.json();\r\n        return finalData.choices[0].message.content;\r\n      }\r\n      \r\n      return data.choices[0].message.content;\r\n      \r\n    } catch (error) {\r\n      console.error('Weather API Error:', error);\r\n      throw new Error(`Failed to get weather information: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const callMCPFunction = async (functionName, args) => {\r\n    try {\r\n      const response = await fetch(apiConfig.mcpServer.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-api-key': apiConfig.mcpServer.apiKey,\r\n        },\r\n        body: JSON.stringify({\r\n          jsonrpc: \"2.0\",\r\n          method: \"tools/call\",\r\n          params: {\r\n            name: functionName,\r\n            arguments: args\r\n          },\r\n          id: Date.now()\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`MCP server error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.error) {\r\n        throw new Error(`MCP function error: ${data.error.message}`);\r\n      }\r\n      \r\n      return data.result;\r\n      \r\n    } catch (error) {\r\n      console.error('MCP Server Error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim() || isLoading) return;\r\n\r\n    const userMessage = inputValue.trim();\r\n    setInputValue('');\r\n    setError('');\r\n    setIsLoading(true);\r\n\r\n    // Add user message\r\n    const newUserMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: userMessage,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, newUserMessage]);\r\n    setQuestionCount(prev => prev + 1);\r\n\r\n    try {\r\n      // Simulate API call to your weather agent\r\n      const response = await simulateWeatherResponse(userMessage);\r\n      \r\n      // Add assistant response\r\n      const assistantMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'assistant',\r\n        content: response,\r\n        timestamp: new Date(),\r\n        metadata: {\r\n          mcpServer: 'WeatherTools MCP Server',\r\n          serverUrl: apiConfig.mcpServer.url,\r\n          model: `${apiConfig.agent.name} (${apiConfig.azureOpenAI.deploymentName})`,\r\n          inputWords: userMessage.split(' ').length,\r\n          responseWords: response.split(' ').length\r\n        }\r\n      };\r\n      \r\n      setMessages(prev => [...prev, assistantMessage]);\r\n      \r\n    } catch (err) {\r\n      setError('Failed to get weather information. Please try again.');\r\n      console.error('Weather API error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleExampleClick = (question) => {\r\n    setInputValue(question);\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-app\">\r\n      <div className=\"app-header\">\r\n        <h1>🌤️ Weather Agent</h1>\r\n        <div className=\"user-info\">\r\n          <span>Welcome, {user?.name || 'User'}!</span>\r\n          <button className=\"logout-button\" onClick={handleLogout}>\r\n            Sign Out\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"chat-container\">\r\n        <div className=\"messages-area\">\r\n          {messages.length === 0 && (\r\n            <div className=\"example-questions\">\r\n              <h3>🌟 Example Questions:</h3>\r\n              <ul>\r\n                {exampleQuestions.map((question, index) => (\r\n                  <li key={index} onClick={() => handleExampleClick(question)}>\r\n                    {question}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <p><strong>💡 Tip:</strong> Click on any example above or type your own weather question!</p>\r\n            </div>\r\n          )}\r\n          \r\n          {error && (\r\n            <div className=\"error-message\">\r\n              ❌ {error}\r\n            </div>\r\n          )}\r\n          \r\n          {messages.map((message) => (\r\n            <div key={message.id} className={`message ${message.type}`}>\r\n              <div className=\"message-label\">\r\n                {message.type === 'user' ? '🤔 You asked:' : '🤖 Weather Agent:'}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                {message.content}\r\n              </div>\r\n              {message.metadata && (\r\n                <div className=\"info-panel\">\r\n                  <h4>📊 Response Details:</h4>\r\n                  <p><strong>MCP Server:</strong> {message.metadata.mcpServer}</p>\r\n                  <p><strong>Model:</strong> {message.metadata.model}</p>\r\n                  <p><strong>Input:</strong> {message.metadata.inputWords} words</p>\r\n                  <p><strong>Response:</strong> {message.metadata.responseWords} words</p>\r\n                  <p><strong>Question #{questionCount}</strong></p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n          \r\n          {isLoading && (\r\n            <div className=\"message assistant\">\r\n              <div className=\"message-label\">🤖 Weather Agent:</div>\r\n              <div className=\"loading\">Getting weather information...</div>\r\n            </div>\r\n          )}\r\n          \r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        \r\n        <div className=\"input-area\">\r\n          <div className=\"input-container\">\r\n            <textarea\r\n              className=\"message-input\"\r\n              value={inputValue}\r\n              onChange={(e) => setInputValue(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Ask me about the weather... (e.g., What's the forecast for London?)\"\r\n              rows={1}\r\n              disabled={isLoading}\r\n            />\r\n            <button\r\n              className=\"send-button\"\r\n              onClick={handleSendMessage}\r\n              disabled={!inputValue.trim() || isLoading}\r\n            >\r\n              {isLoading ? '⏳' : '🚀'} Send\r\n            </button>\r\n          </div>\r\n          <div style={{ marginTop: '10px', fontSize: '0.9rem', color: '#666' }}>\r\n            💡 Connected to: {apiConfig.mcpServer.url} | Questions asked: {questionCount}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}